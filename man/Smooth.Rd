% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/smooth.R
\name{Smooth}
\alias{Smooth}
\title{R6 class for a penalized spline smooth}
\description{
The penalized spline smooths are constructed using the
\link[mgcv:mgcv-package]{mgcv} package. See also:
\itemize{
\item \code{\link[mgcv:s]{mgcv::s()}}
\item \code{\link[mgcv:smooth.terms]{mgcv::smooth.terms}}
\item \code{\link[mgcv:smoothCon]{mgcv::smoothCon()}}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{terms}}{The names of the covariates as a character vector.}

\item{\code{data}}{The data frame from which the covariates are extracted.}

\item{\code{bs}}{A basis abbreviation as defined in mgcv.
Defaults to \code{"tp"}.}

\item{\code{k}}{The basis dimension before constraints and penalization.
Defaults to 10.}

\item{\code{m}}{The order of the penalty.
Defaults to \code{NA} for auto-initialization.}

\item{\code{xt}}{Extra information to set up the basis.
Defaults to \code{NULL}.}

\item{\code{knots}}{The knots for the basis construction as a data frame with
the terms as names. Defaults to \code{NULL} for auto-initialization
with mgcv's basis-specific method.}

\item{\code{constraints}}{A matrix of (identifiability) constraints. Defaults
to \code{NULL}, in which case only a centering constraint
will be applied.}

\item{\code{absorb_constraints}}{If the constraints should be absorbed into the
basis. Defaults to \code{TRUE}.}

\item{\code{scale_penalty}}{If the penalty matrices should be scaled to match
the inner product of the design matrix. Defaults to
\code{TRUE}.}

\item{\code{identity_penalty}}{If the smooth should be reparameterized to turn
the penalty matrices into identity matrices. This
is more or less equivalent to
\code{\link[mgcv:smooth2random]{mgcv::smooth2random()}}.
Defaults to \code{FALSE}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Smooth$new()}}
\item \href{#method-add_knots}{\code{Smooth$add_knots()}}
\item \href{#method-add_centering_constraint}{\code{Smooth$add_centering_constraint()}}
\item \href{#method-add_point_constraints}{\code{Smooth$add_point_constraints()}}
\item \href{#method-remove_all_constraints}{\code{Smooth$remove_all_constraints()}}
\item \href{#method-construct}{\code{Smooth$construct()}}
\item \href{#method-clone}{\code{Smooth$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new smooth object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$new(terms, data, bs = "tp", k = 10)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{terms}}{The names of the covariates as a character vector.}

\item{\code{data}}{The data frame from which the covariates are extracted.}

\item{\code{bs}}{A basis abbreviation as defined in mgcv.
Defaults to \code{"tp"}.}

\item{\code{k}}{The basis dimension before constraints and penalization.
Defaults to 10.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_knots"></a>}}
\if{latex}{\out{\hypertarget{method-add_knots}{}}}
\subsection{Method \code{add_knots()}}{
Add explicit knots using mgcv's basis-specific method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$add_knots()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_centering_constraint"></a>}}
\if{latex}{\out{\hypertarget{method-add_centering_constraint}{}}}
\subsection{Method \code{add_centering_constraint()}}{
Add an explicit centering constraint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$add_centering_constraint()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_point_constraints"></a>}}
\if{latex}{\out{\hypertarget{method-add_point_constraints}{}}}
\subsection{Method \code{add_point_constraints()}}{
Add a point constraint where the smooth should pass through zero.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$add_point_constraints(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame with the terms as names defining where the
smooth should pass through zero.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_all_constraints"></a>}}
\if{latex}{\out{\hypertarget{method-remove_all_constraints}{}}}
\subsection{Method \code{remove_all_constraints()}}{
Remove all constraints (including the centering constraint).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$remove_all_constraints()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-construct"></a>}}
\if{latex}{\out{\hypertarget{method-construct}{}}}
\subsection{Method \code{construct()}}{
Construct the design matrix and the penalty matrices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$construct(data = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{An optional data frame if different data should be used for
the construction of the design matrix than the basis.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with the elements \code{design_matrix}, \code{penalty_matrices} and
\code{ranks}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Smooth$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
